#!/usr/bin/env python

import json
import subprocess
import os
from re import template
from sys import argv

# read commit template
commit_msg = []
with open(argv[1], "r") as f:
    commit_msg = f.read().split("\n")

# conventional commits
if commit_msg[0].startswith("Merge"):
    commit_msg[0] = f"chore: {commit_msg[0].lower()}"
if commit_msg[0].startswith("Revert"):
    commit_msg[0] = f"fix: {commit_msg[0].lower()}"

# jira
try:
    import requests

    jira = {}
    with open(
        os.path.join(os.environ["HOME"], ".config", "git", "work", "jira.json"), "r"
    ) as f:
        jira = json.loads(f.read())

    jql = 'assignee = currentUser() AND statusCategory = "In Progress"'
    issues_json = requests.get(
        f'{jira["url"]}/rest/api/2/search',
        params={"jql": jql},
        auth=tuple(jira["auth"]),
    ).json()

    lines = []
    for issue in issues_json["issues"]:
        issue_line = f'ref: {issue["key"]}'
        fields = issue.get("fields")
        parent = fields.get("parent", {})
        if parent:
            issue_line += f' ({fields["parent"]["key"]})'
        issue_line += f': {fields["summary"]}'

        lines.append(issue_line)

    commit_msg.extend(lines)

except Exception as e:
    commit_msg.append(f'# jira exception: {type(e)}: {e}')

# write back
with open(argv[1], "w") as f:
    f.write("\n".join(commit_msg))
