#!/usr/bin/env python

import json
import subprocess
import os
from re import template
from sys import argv

# gather context
origin = subprocess.getoutput("git remote get-url origin")

# read commit template
commit_msg = []
with open(argv[1], "r") as f:
    commit_msg = f.read().split("\n")

# conventional commits
if commit_msg[0].startswith("Merge"):
    commit_msg[0] = f"chore: {commit_msg[0].lower()}"
if commit_msg[0].startswith("Revert"):
    commit_msg[0] = f"fix: {commit_msg[0].lower()}"

# jira
def do_jira():
    import requests
    import yaml

    jira = {}
    with open(
        os.path.join(os.environ["HOME"], ".config", "git", "work", "jira.json"), "r"
    ) as f:
        jira = json.loads(f.read())

    jql = 'assignee = currentUser() AND statusCategory = "In Progress"'
    issues_json = requests.get(
        f'{jira["url"]}/rest/api/2/search',
        params={"jql": jql},
        auth=tuple(jira["auth"]),
    ).json()

    lines = []
    for issue in issues_json["issues"]:
        issue_line = f'ref: {issue["key"]}'
        fields = issue.get("fields")
        parent = fields.get("parent", {})
        parent_fields = parent.get("fields", {})
        description = (
            fields.get("description", "").strip()
            or parent_fields.get("description", "").strip()
        ).replace("\xa0", "")

        if parent:
            issue_line += f' ({fields["parent"]["key"]})'
        issue_line += f': {fields["summary"]}'

        if description:
            docs = yaml.full_load_all(description)
            repos = [x.get("repo", []) for x in docs if "repo" in x]
            repos = [x for y in repos for x in y]
            hit = False
            for repo in repos:
                if origin.startswith(repo):
                    hit = True
            if repos and not hit:
                issue_line = ""

        if issue_line:
            lines.append(issue_line)

    return lines


# invoke helpers
for func in [do_jira]:
    try:
        lines = func()
        if lines:
            commit_msg.extend(lines)
    except Exception as e:
        commit_msg.append(
            "\n".join(
                [
                    f"# {x}"
                    for x in f"{func.__name__} exception: {type(e)}: {e}".split("\n")
                ]
            )
        )


# write back
with open(argv[1], "w") as f:
    f.write("\n".join(commit_msg))
